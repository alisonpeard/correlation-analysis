library(zoo)
library(forecast) # tsdisplay, stl
library(arrow) # parquet reading
library(tseries) # adf.test
library(lubridate)
indicator <- "ep_total"
buffer <- 25
# load data
df1 <- read_parquet("/Users/alison/Documents/RAPID/correlation-analysis/data_results/nf/full_timeseries/wrz_1/NF1.parquet")
library(zoo)
library(forecast) # tsdisplay, stl
library(arrow) # parquet reading
library(tseries) # adf.test
library(lubridate)
indicator <- "ep_total"
buffer <- 25
# load data
df1 <- read_parquet("/Users/alison/Documents/RAPID/correlation-analysis/data_results/nf/full_timeseries/wrz_1/NF4.parquet")
df2 <- read_parquet("/Users/alison/Documents/RAPID/correlation-analysis/data_results/nf/full_timeseries/wrz_1/NF2.parquet")
df3 <- read_parquet("/Users/alison/Documents/RAPID/correlation-analysis/data_results/nf/full_timeseries/wrz_1/NF3.parquet")
# process dataframe: concatenate the ensembles to help fit
format.date <- function(date_string) {
date <- as.Date(date_string)
year <- as.integer(format(date, "%Y"))
month <- as.integer(format(date, "%m"))
day <- as.integer(format(date, "%d"))
return(c(year, month, day))
}
make_ts <- function(df,indicator, buffer, delta=c(0, 0, 0)){
# process df
df <- df[(df$buffer==buffer),]
df$date <- make_date(year=df$Year, month=df$Month)
all.dates <- seq.Date(min(df$date), max(df$date), "month")
df <- merge(x=data.frame(date=all.dates), y=df, all.x=TRUE)
# get key dates
start.date <- format.date(df[1, "date"]) + delta
end.date <- format.date(df[dim(df)[1], "date"]) + delta
df$date <- df$date + years(delta[1]) + months(delta[2]) + days(delta[3])
# fill in any NaNs
zoo.values <- zoo(df[, c(indicator, "LoS")], df$date)
approx.values <- na.approx(zoo.values)
return(list(ts=approx.values, start=start.date, end=end.date))
}
concat_ts <- function(dfs, indicator, buffer){
delta = c(0, 0, 0)
res <- make_ts(dfs[[1]],indicator, buffer)
start <- res$start
end <- res$end
ts <- res$ts
delta <- end - start + c(0, 0, 1)
for(df in dfs[2:length(dfs)]){
res <- make_ts(df, indicator, buffer, delta)
ts <- rbind(ts, res$ts)
end <- res$end
delta <- end - start + c(0, 0, 1)
}
ts <- ts(ts, start=start, end=end, frequency=12)
return(list(ts=ts, start=start, end=end))
}
res <- concat_ts(dfs=list(df1, df2, df3), indicator=indicator, buffer=buffer)
ts <- res$ts
tsdisplay(ts[,indicator]) # lags don't die out but oscillate => trend/seasonality
tsdisplay(ts[,'LoS']) # lags die out so ok stationary
adf.test(ts[,indicator]) # p-value < 0.01, alternative hypothesis: stationary
adf.test(ts[,"LoS"]) # p-value < 0.01, alternative hypothesis: stationary, only for residuals
# cumulative periodograms => trend and periodicity
par(mfrow=c(2, 2))
cpgram(ts[,"LoS"])
cpgram(diff(ts[,"LoS"]))
cpgram(ts[,indicator])
cpgram(diff(diff(ts[,indicator], 12)))
diffs <- function(x, diffs=c(1), start=res$start, end=res$end){
for(d in diffs){
x <- diff(x, d)
}
return(x)
}
d1 <- diffs(ts[,indicator], c(1, 12))
ts.d <- ts[1:length(d1),]
ts.d[, indicator] <- d1
ts.d[, "LoS"] <- ts[1:length(d1), "LoS"]
ts.d <- ts(ts.d, start=res$start, end=res$end, frequency=12)
ts.d
d1
head(d1)
# Autopersistence [d1]
d1[2:]
# Autopersistence [d1]
n <- length(d1)
d1[2:n]
length(d1[2:n])
lag <- 1
length(d1[1 + lag:n])
length(d1[1:n - lag])
length(d1[1 + lag:n])
1 + lag
length(d1[2:n])
length(d1[(1+lag):n])
length(d1[1:(n-lag)])
yk1 <- d1[(1+lag):n]
yk0 <- d1[1:(n-lag)]
yk <- d1[(1+lag):n]
y0 <- d1[1:(n-lag)]
yk - y0
d1
d1 >0
as.numeric(d1 > 0)
# Autopersistence [d1]
x <- as.numeric(d1 > 0)
n <- length(x)
lag <- 1
yk <- x[(1+lag):n]
y0 <- x[1:(n-lag)]
yk - y0
diff <- yk - y0
sum <- yk + y0
diff == 1
x[diff == 1]
diff == 1
sum(diff == 1)
sum(diff == 1)  # (1, 0) - pairs
numerator <- sum(diff == 1)  # (1, 0) - pairs
one.zero <- sum(diff == 1)  # (1, 0) - pairs
zero.zero <- sum((1 - (yk + y0) == 2)
zero.zero <- sum((1 - (yk + y0) == 2))
zero.zero <- sum((1 - (yk + y0) == 2))
zero.zero <- sum((2 - (yk + y0) == 2))
one.zero / zero.zero
apf.0 <- one.zero / (one.zero + zero.zero)
one.zero <- sum((yk - y0) == 1)  # (1, 0)-pairs
zero.zero <- sum((2 - (yk + y0) == 2)) # (0, 0)-pairs
one.one <- sum((2 - (yk + y0) == 0)) # (1, 1)-pairs
zero.one <- sum((yk - y0) == -1) # (0, 1)-pairs
apf.1 <- one.one / (one.one + zero.one)
maxlags <- 2
numeric(maxlags)
autopersistence <- function(x, maxlags=1){
x <- as.numeric(x > 0) # make sure its binary
apf.0 <- numeric(maxlags)
apf.1 <- numeric(maxlags)
n <- length(x)
for(i in maxlags){
xk <- x[(1+i):n]
x0 <- x[1:(n-i)]
# conditional probabilities
one.zero <- sum((xk - x0) == 1)  # (1, 0)-pairs
zero.zero <- sum((2 - (xk + x0) == 2)) # (0, 0)-pairs
one.one <- sum((2 - (xk + x0) == 0)) # (1, 1)-pairs
zero.one <- sum((xk - x0) == -1) # (0, 1)-pairs
apf.0[i] <- one.zero / (one.zero + zero.zero)
apf.1[i] <- one.one / (one.one + zero.one)
}
return(apf.0=apf.0, apf.1=apf.1)
}
autopersistenc(x)
autopersistence(x)
autopersistence <- function(x, maxlags=1){
x <- as.numeric(x > 0) # make sure its binary
apf.0 <- numeric(maxlags)
apf.1 <- numeric(maxlags)
n <- length(x)
for(i in maxlags){
xk <- x[(1+i):n]
x0 <- x[1:(n-i)]
# conditional probabilities
one.zero <- sum((xk - x0) == 1)  # (1, 0)-pairs
zero.zero <- sum((2 - (xk + x0) == 2)) # (0, 0)-pairs
one.one <- sum((2 - (xk + x0) == 0)) # (1, 1)-pairs
zero.one <- sum((xk - x0) == -1) # (0, 1)-pairs
apf.0[i] <- one.zero / (one.zero + zero.zero)
apf.1[i] <- one.one / (one.one + zero.one)
}
return(c(apf.0=apf.0, apf.1=apf.1))
}
autopersistence(x)
autopersistence(x, maxlags=2)
autopersistence <- function(x, maxlags=1){
x <- as.numeric(x > 0) # make sure its binary
apf.0 <- numeric(maxlags)
apf.1 <- numeric(maxlags)
n <- length(x)
for(i in maxlags){
xk <- x[(1+i):n]
x0 <- x[1:(n-i)]
# conditional probabilities
one.zero <- sum((xk - x0) == 1)  # (1, 0)-pairs
zero.zero <- sum((2 - (xk + x0) == 2)) # (0, 0)-pairs
one.one <- sum((2 - (xk + x0) == 0)) # (1, 1)-pairs
zero.one <- sum((xk - x0) == -1) # (0, 1)-pairs
apf.0[i] <- one.zero / (one.zero + zero.zero)
apf.1[i] <- one.one / (one.one + zero.one)
}
return(list(apf.0=apf.0, apf.1=apf.1))
}
autopersistence(x, maxlags=2)
autopersistence(x, maxlags=1)
autopersistence(x, maxlags=2)
autopersistence(x, maxlags=3)
autopersistence <- function(x, maxlags=1){
x <- as.numeric(x > 0) # make sure its binary
apf.0 <- numeric(maxlags)
apf.1 <- numeric(maxlags)
n <- length(x)
for(i in range(maxlags)){
xk <- x[(1+i):n]
x0 <- x[1:(n-i)]
# conditional probabilities
one.zero <- sum((xk - x0) == 1)  # (1, 0)-pairs
zero.zero <- sum((2 - (xk + x0) == 2)) # (0, 0)-pairs
one.one <- sum((2 - (xk + x0) == 0)) # (1, 1)-pairs
zero.one <- sum((xk - x0) == -1) # (0, 1)-pairs
apf.0[i] <- one.zero / (one.zero + zero.zero)
apf.1[i] <- one.one / (one.one + zero.one)
}
return(list(apf.0=apf.0, apf.1=apf.1))
}
autopersistence(x, maxlags=1)
autopersistence(x, maxlags=2)
autopersistence <- function(x, maxlags=1){
x <- as.numeric(x > 0) # make sure its binary
apf.0 <- numeric(maxlags)
apf.1 <- numeric(maxlags)
n <- length(x)
for(i in 1:maxlags){
xk <- x[(1+i):n]
x0 <- x[1:(n-i)]
# conditional probabilities
one.zero <- sum((xk - x0) == 1)  # (1, 0)-pairs
zero.zero <- sum((2 - (xk + x0) == 2)) # (0, 0)-pairs
one.one <- sum((2 - (xk + x0) == 0)) # (1, 1)-pairs
zero.one <- sum((xk - x0) == -1) # (0, 1)-pairs
apf.0[i] <- one.zero / (one.zero + zero.zero)
apf.1[i] <- one.one / (one.one + zero.one)
}
return(list(apf.0=apf.0, apf.1=apf.1))
}
autopersistence(x, maxlags=1)
autopersistence(x, maxlags=3)
apfs <- autopersistence(x, maxlags=12)
plot(1:12, apfs$apf.0)
# Autopersistence functions
autopersistence <- function(x, maxlags=1){
x <- as.numeric(x > 0) # make sure its binary
apf.0 <- numeric(maxlags)
apf.1 <- numeric(maxlags)
n <- length(x)
for(i in 1:maxlags){
xk <- x[(1+i):n]
x0 <- x[1:(n-i)]
# conditional probabilities
one.zero <- sum((xk - x0) == 1)  # (1, 0)-pairs
zero.zero <- sum((2 - (xk + x0) == 2)) # (0, 0)-pairs
one.one <- sum((2 - (xk + x0) == 0)) # (1, 1)-pairs
zero.one <- sum((xk - x0) == -1) # (0, 1)-pairs
apf.0[i] <- one.zero / (one.zero + zero.zero)
apf.1[i] <- one.one / (one.one + zero.one)
}
return(list(apf0=apf0, apf.1=apf.1))
}
apfs <- autopersistence(x, maxlags=12)
# Autopersistence functions
autopersistence <- function(x, maxlags=1){
x <- as.numeric(x > 0) # make sure its binary
apf.0 <- numeric(maxlags)
apf.1 <- numeric(maxlags)
n <- length(x)
for(i in 1:maxlags){
xk <- x[(1+i):n]
x0 <- x[1:(n-i)]
# conditional probabilities
one.zero <- sum((xk - x0) == 1)  # (1, 0)-pairs
zero.zero <- sum((2 - (xk + x0) == 2)) # (0, 0)-pairs
one.one <- sum((2 - (xk + x0) == 0)) # (1, 1)-pairs
zero.one <- sum((xk - x0) == -1) # (0, 1)-pairs
apf.0[i] <- one.zero / (one.zero + zero.zero)
apf.1[i] <- one.one / (one.one + zero.one)
}
return(list(apf0=apf.0, apf1=apf.1))
}
apfs <- autopersistence(x, maxlags=12)
plot(1:12, apfs$apf0, type="l")
plot(1:12, apfs$apf1, type="l")
par(mfrow=c(1, 1))
plot(1:12, apfs$apf0, type="l")
plot(1:12, apfs$apf1, type="l")
par(mfrow=c(1, 1))
plot(1:12, apfs$apf0, type="l")
lines(1:12, apfs$apf1)
par(mfrow=c(1, 1))
plot(1:12, apfs$apf0, type="l", col='blue')
lines(1:12, apfs$apf1, col='green')
apfs <- autopersistence(x, maxlags=24)
par(mfrow=c(1, 1))
plot(1:24, apfs$apf0, type="l", col='blue')
lines(1:24, apfs$apf1, col='green')
par(mfrow=c(1, 1))
plot(1:24, apfs$apf0, type="l", col='blue')
lines(1:24, apfs$apf1, col='green')
title("Empirical autopersistence graphs")
xlabel("Lags")
ylabel("Probability")
ylim(0.3, 0.7)
ylimit(0.3, 0.7)
plot(1:24, apfs$apf0, type="l", col='blue', ylim=c(.3, .7))
lines(1:24, apfs$apf1, col='green')
title("Empirical autopersistence graphs")
xlabel("Lags")
ylabel("Probability")
par(mfrow=c(1, 1))
plot(1:24, apfs$apf0, type="l", col='blue', ylim=c(.3, .7), xlab="lags", ylab="probability")
lines(1:24, apfs$apf1, col='green')
title("Empirical autopersistence graphs")
par(mfrow=c(1, 1))
plot(1:24, apfs$apf0, type="l", col='blue', ylim=c(.3, .7), xlab="lags", ylab="probability")
lines(1:24, apfs$apf1, col='green')
title("Empirical autopersistence graphs")
legend(legend=c("APG0", "APG1"),
col=c("blue", "green"), lty=1:2, cex=0.8)
legend(1, 95, legend=c("APG0", "APG1"),
col=c("blue", "green"), lty=1:2, cex=0.8)
legend(1, 20, legend=c("APG0", "APG1"),
col=c("blue", "green"), lty=1:2, cex=0.8)
par(mfrow=c(1, 1))
plot(1:24, apfs$apf0, type="l", col='blue', ylim=c(.3, .7), xlab="lags", ylab="probability")
lines(1:24, apfs$apf1, col='green')
title("Empirical autopersistence graphs")
legend(1, 20, legend=c("APG0", "APG1"),
col=c("blue", "green"), lty=1:2, cex=0.8)
legend(0.6, 20, legend=c("APG0", "APG1"),
col=c("blue", "green"), lty=1:2, cex=0.8)
par(mfrow=c(1, 1))
plot(1:24, apfs$apf0, type="l", col='blue', ylim=c(.3, .7), xlab="lags", ylab="probability")
lines(1:24, apfs$apf1, col='green')
title("Empirical autopersistence graphs")
legend(0.6, 20, legend=c("APG0", "APG1"),
col=c("blue", "green"), lty=1:2, cex=0.8)
apfs <- autopersistence(x, maxlags=24)
par(mfrow=c(1, 1))
plot(1:24, apfs$apf0, type="l", col='blue', ylim=c(.3, .7), xlab="lags", ylab="probability")
lines(1:24, apfs$apf1, col='green')
title("Empirical autopersistence graphs")
legend(20, 0.6, legend=c("APG0", "APG1"),
col=c("blue", "green"), lty=1:2, cex=0.8)
legend(15, 0.6, legend=c("APG0", "APG1"),
col=c("blue", "green"), lty=1:2, cex=0.8)
apfs <- autopersistence(x, maxlags=24)
par(mfrow=c(1, 1))
plot(1:24, apfs$apf0, type="l", col='blue', ylim=c(.3, .7), xlab="lags", ylab="probability")
lines(1:24, apfs$apf1, col='green')
title("Empirical autopersistence graphs")
legend(15, 0.65, legend=c("APG0", "APG1"),
col=c("blue", "green"), lty=1:2, cex=0.8)
legend(16, 0.65, legend=c("APG0", "APG1"),
col=c("blue", "green"), lty=1:2, cex=0.8)
legend(18, 0.65, legend=c("APG0", "APG1"),
col=c("blue", "green"), lty=1:2, cex=0.8)
legend(18, 0.7, legend=c("APG0", "APG1"),
col=c("blue", "green"), lty=1:2, cex=0.8)
par(mfrow=c(1, 1))
plot(1:24, apfs$apf0, type="l", col='blue', ylim=c(.3, .7), xlab="lags", ylab="probability")
lines(1:24, apfs$apf1, col='green')
title("Empirical autopersistence graphs")
legend(18, 0.7, legend=c("APG0", "APG1"),
col=c("blue", "green"), lty=1:2, cex=0.8)
par(mfrow=c(1, 1))
plot(1:24, apfs$apf0, type="l", col='blue', ylim=c(.3, .7), xlab="lags", ylab="probability")
lines(1:24, apfs$apf1, col='green')
title("Empirical autopersistence graphs")
legend(18, 0.7, legend=c("APG0 P(1|0)", "APG1 P(1|1)"),
col=c("blue", "green"), lty=1:2, cex=0.8)
legend(16, 0.7, legend=c("APG0 P(1|0)", "APG1 P(1|1)"),
col=c("blue", "green"), lty=1:2, cex=0.8)
par(mfrow=c(1, 1))
plot(1:24, apfs$apf0, type="l", col='blue', ylim=c(.3, .7), xlab="lags", ylab="probability")
lines(1:24, apfs$apf1, col='green')
title("Empirical autopersistence graphs")
legend(16, 0.7, legend=c("APG0 P(1|0)", "APG1 P(1|1)"),
col=c("blue", "green"), lty=1:2, cex=0.8)
autopersistence <- function(x, maxlags=1){
x <- as.numeric(x > 0) # make sure its binary
apf.0 <- numeric(maxlags)
apf.1 <- numeric(maxlags)
n <- length(x)
for(i in 1:maxlags){
xk <- x[(1+i):n]
x0 <- x[1:(n-i)]
# conditional probabilities
one.zero <- sum((xk - x0) == 1)  # (1, 0)-pairs
zero.zero <- sum((2 - (xk + x0) == 2)) # (0, 0)-pairs
one.one <- sum((2 - (xk + x0) == 0)) # (1, 1)-pairs
zero.one <- sum((xk - x0) == -1) # (0, 1)-pairs
apf.0[i] <- one.zero / (one.zero + zero.zero)
apf.1[i] <- one.one / (one.one + zero.one)
}
return(list(apf0=apf.0, apf1=apf.1))
}
apfs <- autopersistence(x, maxlags=24)
par(mfrow=c(1, 1))
plot(1:24, apfs$apf0, type="l", col='blue', ylim=c(.3, .7), xlab="lags", ylab="probability")
lines(1:24, apfs$apf1, col='green')
title("Empirical Autopersistence Graphs")
legend(16, 0.7, legend=c("APG0 P(1|0)", "APG1 P(1|1)"),
col=c("blue", "green"), lty=1:2, cex=0.8)
autopersistence <- function(x, maxlags=1){
x <- as.numeric(x > 0) # make sure its binary
apf.0 <- numeric(maxlags)
apf.1 <- numeric(maxlags)
n <- length(x)
for(i in 1:maxlags){
xk <- x[(1+i):n]
x0 <- x[1:(n-i)]
# conditional probabilities
one.zero <- sum((xk - x0) == 1)  # (1, 0)-pairs
zero.zero <- sum((2 - (xk + x0) == 2)) # (0, 0)-pairs
one.one <- sum((2 - (xk + x0) == 0)) # (1, 1)-pairs
zero.one <- sum((xk - x0) == -1) # (0, 1)-pairs
apf.0[i] <- one.zero / (one.zero + zero.zero)
apf.1[i] <- one.one / (one.one + zero.one)
}
return(list(apf0=apf.0, apf1=apf.1))
}
apfs <- autopersistence(x, maxlags=36)
par(mfrow=c(1, 1))
plot(1:36, apfs$apf0, type="l", col='blue', ylim=c(.3, .7), xlab="lags", ylab="probability")
lines(1:36, apfs$apf1, col='green')
title("Empirical Autopersistence Graphs")
legend(16, 0.7, legend=c("APG0 P(1|0)", "APG1 P(1|1)"),
col=c("blue", "green"), lty=1:2, cex=0.8)
par(mfrow=c(1, 1))
plot(1:36, apfs$apf0, type="l", col='blue', ylim=c(.3, .7), xlab="lags", ylab="probability")
lines(1:36, apfs$apf1, col='green')
title("Empirical Autopersistence Graphs")
legend(16, 0.7, legend=c("APG0 P(1|0)", "APG1 P(1|1)"),
col=c("blue", "green"), cex=0.8)
par(mfrow=c(1, 1))
plot(1:36, apfs$apf0, type="l", col='blue', ylim=c(.3, .7), xlab="lags", ylab="probability")
lines(1:36, apfs$apf1, col='green')
title("Empirical Autopersistence Graphs")
legend(16, 0.7, legend=c("APG0 P(1|0)", "APG1 P(1|1)"),
col=c("blue", "green"), lty=c(1, 1), cex=0.8)
glarma
library(glarma)
glarma
help(glarma)
glarma(x)
# ACDF and PACFs
par(mfrow=c(2,2))
acf(ts.d[,indicator])
acf(ts.d[,"LoS"])
pacf(ts.d[,indicator])
pacf(ts.d[,"LoS"])
par(mfrow=c(1, 1))
plot(decompose(ts.d[,indicator]))
decompose(ts[,indicator])$seasonal
par(mfrow=c(2, 1))
plot(ts[,"LoS"])
plot(ts.d[,indicator])
par(mfrow=c(2, 1))
plot(ts[,"LoS"])
plot(ts.d[,indicator])
y <- as.integer(ts[,"LoS"])
X <- as.numeric(ts.d[,indicator])
X <- cbind(intersect=rep(1, length(X)), variable=X)
barma.mod <- glarma(as.numeric(y>0), X, type="Binomial", residuals="identity")
barma.mod <- glarma(as.numeric(y>0), X) #, type="Binomial", residuals="identity")
barma.mod <- glarma(as.numeric(y>0), X), type="binomial") #, residuals="identity")
barma.mod <- glarma(as.numeric(y>0), X, type="binomial") #, residuals="identity")
barma.mod <- glarma(as.numeric(y>0), X, type=binomial) #, residuals="identity")
barma.mod <- glarma(as.numeric(y>0), X, type=binomial()) #, residuals="identity")
barma.mod <- glarma(as.numeric(y>0), X, type="Bin") #, residuals="identity")
as.numeric(y>0)
barma.mod <- glarma(y, X, type="Bin") #, residuals="identity")
barma.mod <- glarma(y, X, type="Poi") #, residuals="identity")
barma.mod <- glarma(as.numeric(y>0), X, type="Poi") #, residuals="identity")
barma.mod <- glarma(as.numeric(y>0), X, type="Bin") #, residuals="identity")
y[,1]
y
y[1]
[,1]
y[,1]
as.matrix(y)[,1]
barma.mod <- glarma(as.matrix(as.numeric(y>0)), X, type="Bin") #, residuals="identity")
help(glarma)
barma.mod <- glarmaBinomialIdentity(y, X)
barma.mod <- glarmaBinomialIdentity(as.matrix(y_, X)
barma.mod <- glarmaBinomialIdentity(as.matrix(y), X)
barma.mod <- glarmaBinomialIdentity(as.matrix(y), X)
y.bin <- as.numeric(y>0)
y.bin
numeric(c(2, 2))
matrix(c(2, 2))
matrix(2,2)
matrix(nrow=length(y), ncol=2)
y.bin <- matrix(nrow=length(y), ncol=2)
y.bin[,1] <- as.numeric(y>0)
y.bin[,2] <- as.numeric(y==0)
y.bin
barma.mod <- glarmaBinomialIdentity(y.bin, X)
barma.mod <- glarmaBinomialIdentity(y.bin, X, phiLags=c(1))
barma.mod <- glarmaBinomialIdentity(y.bin, X, phiLags=c(1), thetaLags=c(10))
barma.mod <- glarmaBinomialIdentity(y.bin, X, phiLags=c(1), thetaLags=c(1))
barma.mod <- glarmaBinomialIdentity(y.bin, X, phiLags=c(1), thetaLags=c(1), delta=c(1,1,1))
plot(barma.mod)
summary(barma.mod)
plot(barma.mod, which=c(1))
binomial.mod <- glarma(y, X, type="Poi", thetaLags=c(1, 12), method="NR")
binomial.mod <- glarma(y, X, type="Poi", thetaLags=c(12), method="NR")
poisson.mod <- glarma(y, X, type="Poi", thetaLags=c(12), method="NR")
plot(poisson.mod)
